'use strict';

var $defineProperty = require('es-define-property');
var $SyntaxError = require('es-errors/syntax');
var $TypeError = require('es-errors/type');
var gopd = require('gopd');

/**
 * Defines a data property on an object with configurable attributes.
 * @param {object} obj - The target object.
 * @param {string|symbol} property - The property name.
 * @param {any} value - The value to assign.
 * @param {boolean|null} [nonEnumerable=null] - Whether the property is non-enumerable.
 * @param {boolean|null} [nonWritable=null] - Whether the property is non-writable.
 * @param {boolean|null} [nonConfigurable=null] - Whether the property is non-configurable.
 * @param {boolean} [loose=false] - Whether to allow fallback assignment.
 */
module.exports = function defineDataProperty(
  obj,
  property,
  value,
  nonEnumerable = null,
  nonWritable = null,
  nonConfigurable = null,
  loose = false
) {
  if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
    throw new $TypeError('`obj` must be an object or a function');
  }
  if (typeof property !== 'string' && typeof property !== 'symbol') {
    throw new $TypeError('`property` must be a string or a symbol');
  }
  if (typeof loose !== 'boolean') {
    throw new $TypeError('`loose`, if provided, must be a boolean');
  }

  var desc = gopd ? gopd(obj, property) : null;

  if ($defineProperty) {
    $defineProperty(obj, property, {
      configurable: nonConfigurable === null ? desc?.configurable ?? true : !nonConfigurable,
      enumerable: nonEnumerable === null ? desc?.enumerable ?? true : !nonEnumerable,
      writable: nonWritable === null ? desc?.writable ?? true : !nonWritable,
      value: value,
    });
  } else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {
    obj[property] = value; // fallback to simple assignment
  } else {
    throw new $SyntaxError(
      'This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.'
    );
  }
};